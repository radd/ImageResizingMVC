/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.radd.views;

import io.github.radd.controllers.EditController;
import io.github.radd.models.Action;
import io.github.radd.models.EditModel;
import java.io.File;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Piotr
 */
public class MainFrame extends javax.swing.JFrame implements Observer {

    private EditController controller;
    private EditModel model;
    private DefaultListModel listModel;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }
    
    public MainFrame(EditController c, EditModel m) {
        controller = c;
        model = m;
        ((Observable) model).addObserver(this);
        initComponents();
        customInit();
        showView();
    }
    
    private void showView() {
        setTitle("Images Resizing");
        setVisible(true);
    }
    
    private void customInit() {
        //TODO add list model and spinner model to EditModel
        //and set models to components from EditModel
        
        SpinnerModel shrinkSpinnerModel = new SpinnerNumberModel(model.SHRINK_DEFAULT,
                model.SHRINK_MIN, model.SHRINK_MAX, model.SHRINK_STEP);
        shrinkSpinner.setModel(shrinkSpinnerModel);
        shrinkSpinnerModel.addChangeListener((e) -> {
            controller.setShrink((int) shrinkSpinnerModel.getValue());
        });
        
        SpinnerModel qualitySpinnerModel = new SpinnerNumberModel(model.QUALITY_DEFAULT,
                model.QUALITY_MIN, model.QUALITY_MAX, model.QUALITY_STEP);
        qualitySpinner.setModel(qualitySpinnerModel);
        qualitySpinnerModel.addChangeListener((e) -> {
            controller.setQuality((int) qualitySpinnerModel.getValue());
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        chooseImagesButton = new javax.swing.JButton();
        saveFolderLabel = new javax.swing.JLabel();
        saveFolderTextField = new javax.swing.JTextField();
        chooseFolderButton = new javax.swing.JButton();
        sourceLabel = new javax.swing.JLabel();
        sourceTextField = new javax.swing.JTextField();
        imagesScrollPane = new javax.swing.JScrollPane();
        imageList = new javax.swing.JList<>();
        editPanel = new javax.swing.JPanel();
        shrinkLabel = new javax.swing.JLabel();
        shrinkPercentLabel = new javax.swing.JLabel();
        shrinkSpinner = new javax.swing.JSpinner();
        qualityPercentLabel = new javax.swing.JLabel();
        qualitySpinner = new javax.swing.JSpinner();
        qualityLabel = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        chooseImagesMenuItem = new javax.swing.JMenuItem();
        saveFolderMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        editMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Source and destination"));

        chooseImagesButton.setText("Choose images");
        chooseImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImagesButtonActionPerformed(evt);
            }
        });

        saveFolderLabel.setText("Save folder:");

        saveFolderTextField.setEditable(false);
        saveFolderTextField.setBackground(new java.awt.Color(255, 255, 255));

        chooseFolderButton.setText("Choose folder");
        chooseFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFolderButtonActionPerformed(evt);
            }
        });

        sourceLabel.setText("Source:");

        sourceTextField.setEditable(false);
        sourceTextField.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveFolderLabel)
                    .addComponent(sourceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                    .addComponent(saveFolderTextField))
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooseImagesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooseFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseImagesButton)
                    .addComponent(sourceLabel)
                    .addComponent(sourceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveFolderLabel)
                    .addComponent(saveFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseFolderButton))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        imagesScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Images"));

        listModel = new DefaultListModel();
        imageList.setModel(listModel);
        imageList.setEnabled(false);
        imagesScrollPane.setViewportView(imageList);

        editPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit"));

        shrinkLabel.setText("Shrink size:");

        shrinkPercentLabel.setText("%");

        qualityPercentLabel.setText("%");

        qualitySpinner.setEnabled(false);

        qualityLabel.setText("Quality:");

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(shrinkLabel)
                        .addGap(7, 7, 7)
                        .addComponent(shrinkSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shrinkPercentLabel))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(qualityLabel)
                        .addGap(7, 7, 7)
                        .addComponent(qualitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qualityPercentLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shrinkLabel)
                    .addComponent(shrinkPercentLabel)
                    .addComponent(shrinkSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qualityLabel)
                    .addComponent(qualityPercentLabel)
                    .addComponent(qualitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editButton)
                .addContainerGap())
        );

        fileMenu.setText("File");

        chooseImagesMenuItem.setText("Choose images");
        chooseImagesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImagesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(chooseImagesMenuItem);

        saveFolderMenuItem.setText("Choose save folder");
        saveFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFolderMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFolderMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        editMenuItem.setText("Edit images");
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imagesScrollPane)
                        .addGap(18, 18, 18)
                        .addComponent(editPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagesScrollPane)
                    .addComponent(editPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImagesButtonActionPerformed
        chooseImages();
    }//GEN-LAST:event_chooseImagesButtonActionPerformed

    private void chooseImages() {
        String path = model.getSourceFolderPath() != null
                ? model.getSourceFolderPath() : model.getFileChooserPath();
        JFileChooser chooser = new JFileChooser(path);
	chooser.setFileFilter(model.getFilter());
        chooser.setMultiSelectionEnabled(true);
        chooser.setAcceptAllFileFilterUsed(false);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) { 
            controller.setImages(chooser.getSelectedFiles());
        }
    }
    
    private void chooseFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFolderButtonActionPerformed
        chooseSaveFolder();
    }//GEN-LAST:event_chooseFolderButtonActionPerformed

    private void chooseSaveFolder() {
        String path = model.getDestinationFolderPath() != null
                ? model.getDestinationFolderPath() : model.getFileChooserPath();
        JFileChooser chooser = new JFileChooser(path);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) { 
            controller.setSaveFolder(chooser.getSelectedFile());
        }
    }
    private void chooseImagesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImagesMenuItemActionPerformed
        chooseImages();
    }//GEN-LAST:event_chooseImagesMenuItemActionPerformed

    private void saveFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFolderMenuItemActionPerformed
        chooseSaveFolder();
    }//GEN-LAST:event_saveFolderMenuItemActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        editImages();
    }//GEN-LAST:event_editButtonActionPerformed
    
    private void editImages() {
        controller.editImages();
    }
    
    private void editMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemActionPerformed
        editImages();
    }//GEN-LAST:event_editMenuItemActionPerformed

   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFolderButton;
    private javax.swing.JButton chooseImagesButton;
    private javax.swing.JMenuItem chooseImagesMenuItem;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JPanel editPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JList<String> imageList;
    private javax.swing.JScrollPane imagesScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel qualityLabel;
    private javax.swing.JLabel qualityPercentLabel;
    private javax.swing.JSpinner qualitySpinner;
    private javax.swing.JLabel saveFolderLabel;
    private javax.swing.JMenuItem saveFolderMenuItem;
    private javax.swing.JTextField saveFolderTextField;
    private javax.swing.JLabel shrinkLabel;
    private javax.swing.JLabel shrinkPercentLabel;
    private javax.swing.JSpinner shrinkSpinner;
    private javax.swing.JLabel sourceLabel;
    private javax.swing.JTextField sourceTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        Action action = (Action) arg;
        System.out.println("update: " + action);
        
        switch(action) {
            case SET_IMAGES: setImageList(); break;
            case SET_SOURCE_PATH: setSourcePath(); break;
            case SET_DEST_PATH: setDestPath(); break;
            case EDIT_OK: showInfoMessage("OK"); break;
            case EDIT_ERROR_1: showErrorMessage("No images selected"); break;
            case EDIT_ERROR_2: showErrorMessage(model.getErrorMsg()); break;
        }
    }
    
    
    private void setImageList() {
        listModel.removeAllElements();
        for(File file : model.getImages())
            listModel.addElement(file.getAbsolutePath());
    }

    private void setSourcePath() {
        sourceTextField.setText(model.getSourceFolderPath());
    }

    private void setDestPath() {
        saveFolderTextField.setText(model.getDestinationFolderPath());
    }

    private void showInfoMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg);
        enableEdit();
    }

    public void disableEdit() {
        editButton.setEnabled(false);
    }
    
    private void enableEdit() {
        editButton.setEnabled(true);
    }

    private void showErrorMessage(String msg) {
        JOptionPane.showMessageDialog(this,
                msg,
                "Error",
                JOptionPane.ERROR_MESSAGE);
        enableEdit(); 
    }
}
